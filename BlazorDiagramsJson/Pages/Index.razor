@page "/"
@using Blazor.Diagrams.Core.Models.Base
@using BlazorDiagramsJson.Components
@using BlazorDiagramsJson.Model
@using BlazorDiagramsJson.Model.Nodes
@using BlazorDiagramsJson.Model.OldNodes
@using BlazorDiagramsJson.Model.Serializable
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage BrowserStorage
@inject ILogger<Index> logger

<WarningDialog @ref="_warningModal"></WarningDialog>

<SideMenu OnDragNode="ChangeNodeToAdd"
          OnNodeAdd="OnNodeAddClick"
          @bind-NodeTitle="_nodeTitle"
          OnSaveDiagramMethod="SaveDiagram"
          OnLoadDiagramMethod="LoadDiagramFromBrowserStorage"
          OnDeleteDiagramMethod="DeleteDiagramFromBrowserStorage"
          OnZoomToFitMethod="ZoomToFit"></SideMenu>

<DiagramComponent OnNodeDrop="OnDrop" @bind-Diagram="_diagram"></DiagramComponent>

@code {
    private WarningDialog? _warningModal;
    private Diagram _diagram { get; set; }
    private DiagramSerialize? _savedDiagram;

    private JsonSerializer _jsonSerializer = new();

    private string? _selectedNodeId;
    private bool _nodeSelected;
    private int? _nodeToAdd;
    private string? _nodeTitle;

    /* Setup & Utilities */

    protected override void OnInitialized()
    {
        base.OnInitialized();

        HelloNode();
        RegisterEvents();
    }
    private void RegisterEvents()
    {
        _diagram.Changed += () => { };

        _diagram.Nodes.Added += (n) => { };
        _diagram.Nodes.Removed += (n) => { };

        _diagram.SelectionChanged += (m) =>
        {
            _selectedNodeId = m.Id;
            _nodeSelected = m.Selected;
        };

        _diagram.Links.Added += (l) => { };

        _diagram.Links.Removed += (l) => { };

        _diagram.MouseDown += (m, e) => { };

        _diagram.MouseUp += (m, e) => { };

        _diagram.TouchStart += (m, e) => { };

        _diagram.TouchEnd += (m, e) => { };

        _diagram.MouseClick += (m, e) => { };

        _diagram.MouseDoubleClick += (m, e) => { };
    }
    private void ZoomToFit()
    {
        logger.LogInformation("Zoom to fit diagram");
        _diagram.ZoomToFit(50);
    }

    /* --- */



    /* Choose Node Logic */

    private void AddNodeToDiagram(Point? position = null)
    {
        if (position == null)
        {
            position = new(50, 50);
        }
        switch (_nodeToAdd)
        {
            case 0:
                DrawStartNode(position);
                break;
            case 1:
                DrawEndNode(position);
                break;
            case 2:
                DrawDataNode(position);
                break;
            case 3:
                DrawPowerNode(position);
                break;
            case 4:
                DrawNodeModel(position);
                break;
        };
    }
    private void OnNodeAddClick(int key)
    {
        ChangeNodeToAdd(key);
        AddNodeToDiagram();
    }
    private void ChangeNodeToAdd(int key)
    {
        _nodeToAdd = key;
    }
    private void OnDrop(DragEventArgs e)
    {
        if (_nodeToAdd == null) // Unknown item
            return;

        Point position = RoundPositionToNearestGridSize(e.ClientX, e.ClientY);

        AddNodeToDiagram(position);

        _nodeToAdd = null;
    }
    private Point RoundPositionToNearestGridSize(double x, double y)
    {
        Point relativePoint = _diagram.GetRelativeMousePoint(x, y);
        return new Point(RoundToNearestGridSize(relativePoint.X), RoundToNearestGridSize(relativePoint.Y));
    }
    private double RoundToNearestGridSize(double n)
    {
        double gridSize = _diagram.Options.GridSize.GetValueOrDefault();
        if (_diagram.Options.GridSize == null)
        {
            return n;
        }
        var rounded = Math.Floor(n / gridSize) * gridSize;
        return rounded;
    }
    private string SetNodeTitle()
    {
        if (!String.IsNullOrEmpty(_nodeTitle))
        {
            return _nodeTitle;
        }
        return null;
    }

    /* --- */



    /* Validation */

    private bool StartNodeExists()
    {
        if (_diagram.Nodes.OfType<StartNode>().Any())
        {
            logger.LogWarning("StartNode already present");
            _warningModal.Open("Er kan maximaal één Start Node zijn.");

            return true;
        }
        return false;
    }
    private bool EndNodeExists()
    {
        if (!_diagram.Nodes.OfType<EndNode>().Any())
        {
            logger.LogWarning("StartNode already present");
            _warningModal.Open("Er moet minimaal één End Node zijn.");

            return false;
        }
        return true;
    }

    /* --- */

    /* Nodes */

    private void HelloNode()
    {
        var node = new NodeModel(new Point(25, 25));
        node.Title = "Hello 🙂";
        _diagram.Nodes.Add(node);
    }
    private void DrawStartNode(Point? position = null)
    {
        if (StartNodeExists())
        {
            return;
        }
        var node = new StartNode(position);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void LoadStartNode(NodeSerialize savedNode)
    {
        var node = new StartNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void DrawEndNode(Point position)
    {
        var node = new EndNode(position);
        node.AddPort(PortAlignment.Top);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void LoadEndNode(NodeSerialize savedNode)
    {
        var node = new EndNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void DrawNodeModel(Point position)
    {
        var node = new NodeModel(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Right);
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Left);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void DrawNodeModel(NodeSerialize savedNode) // "old" code with dynamic ports
    {
        NodeModel node = new NodeModel(savedNode.Id, savedNode.Position);
        if (!String.IsNullOrEmpty(savedNode.Title))
        {
            node.Title = savedNode.Title;
        }
        foreach (var port in savedNode.Ports)
        {
            node.AddPort(port.Alignment); // changes port id, but id not needed?
        }
        _diagram.Nodes.Add(node);
    }
    private void DrawDataNode(Point position)
    {
        var node = new DataNode(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void LoadDataNode(NodeSerialize savedNode)
    {
        var node = new DataNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void DrawPowerNode(Point position)
    {
        var node = new PowerNode(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void LoadPowerNode(NodeSerialize savedNode)
    {
        var node = new PowerNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }

    /* --- */



    /* Save/Load Diagram */

    private async Task SaveDiagram()
    {
        logger.LogInformation("Saving to local storage");
        string json = _jsonSerializer.WriteToFile(_diagram); // only saving once per page load? not a problem when using database/file save/browser storage
        await SaveDiagramToBrowserStorage(json);
        logger.LogInformation("Successfully saved");
    }
    private async Task SaveDiagramToBrowserStorage(string json)
    {
        logger.LogInformation("Saving to browser storage");
        await BrowserStorage.SetAsync("savedDiagram", json);
    }
    private async Task LoadDiagramFromBrowserStorage()
    {
        logger.LogInformation("Loading from storage");
        var result = await BrowserStorage.GetAsync<string>("savedDiagram");
        if (result.Success)
        {
            logger.LogInformation("Loaded succesfully from storage");

            _savedDiagram = _jsonSerializer.ReadDiagramFromJson(result.Value);
            FillDiagram();
        }
        else
        {
            logger.LogWarning("Loading from storage failed");

            // show error
        }
    }
    private async Task DeleteDiagramFromBrowserStorage()
    {
        logger.LogInformation("Deleting from storage");
        await BrowserStorage.DeleteAsync("savedDiagram");
        logger.LogInformation("Deleting from storage success"); // check for success
    }
    private void FillDiagram()
    {
        if (_savedDiagram == null)
        {
            // exception
            return;
        }
        // clear diagram
        _diagram.Nodes.Clear();

        DrawSavedNodes();
        DrawSavedLinks();
    }
    private void DrawSavedNodes()
    {
        foreach (var savedNode in _savedDiagram.Nodes)
        {
            // check for node type if custom nodes
            switch (savedNode.NodeType.Name) // vies? use type instead of string
            {
                case "StartNode":
                    LoadStartNode(savedNode); // kan automatisch via type?
                    break;
                case "EndNode":
                    LoadEndNode(savedNode);
                    break;
                case "DataNode":
                    LoadDataNode(savedNode);
                    break;
                case "PowerNode":
                    LoadPowerNode(savedNode);
                    break;
                case "NodeModel":
                    DrawNodeModel(savedNode);
                    break;
            }
        }
    }
    private void DrawSavedLinks()
    {
        foreach (var link in _savedDiagram.Links)
        {
            // problem with custom components? probably have to type check
            NodeModel sourceNode = null;
            NodeModel targetNode = null;

            var diagramEnumerator = _diagram.Nodes.GetEnumerator(); // annoying thing
            while (diagramEnumerator.MoveNext())
            {
                object item = diagramEnumerator.Current;
                NodeModel node = (NodeModel)item; // ugly?
                if (sourceNode == null && node.Id == link.SourceNode)
                {
                    sourceNode = node;
                }
                else if (targetNode == null && node.Id == link.TargetNode)
                {
                    targetNode = node;
                }
                if (sourceNode != null && targetNode != null)
                {
                    _diagram.Links.Add(new LinkModel(sourceNode.GetPort(link.SourcePortAlignment), targetNode.GetPort(link.TargetPortAlignment)));
                    break;
                }
            }
        }
    }

    /* --- */
}
