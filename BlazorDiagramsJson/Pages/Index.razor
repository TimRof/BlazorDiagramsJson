@page "/"
@using Blazor.Diagrams.Core.Models.Base
@using BlazorDiagramsJson.Model
@using BlazorDiagramsJson.Model.Nodes
@using BlazorDiagramsJson.Model.OldNodes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedLocalStorage BrowserStorage
@inject ILogger<Counter> logger

<div class="col-4">
    <div class="collapse @(IsVisible ? "show" : "")">
        <div class="card card-body">
            <div class="mb-2">
                <label for="nodeTitle">Node Title:</label>
                <input type="text" @bind-value="_nodeTitle" placeholder="Leave blank for default" id="nodeTitle" />
            </div>
            <div class="col-6" style="border-color: green;border-style:solid;">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(0)">
                    <span>Start Node</span>
                </div>
            </div>
            <div class="col-6" style="border-color: red;border-style:solid;">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(1)">
                    <span>End Node</span>
                </div>
            </div>
            <div class="col-6" style="border-color: black;border-style:solid;">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(2)">
                    <span>Data Node</span>
                </div>
            </div>
            <div class="col-6" style="border-color: orange;border-style:solid;">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(3)">
                    <span>Power Node</span>
                </div>
            </div>
            <div class="col-6" style="border-color: blue;border-style:solid;">
                <div class="text-center" draggable="true" @ondragstart="() => OnDragStart(4)">
                    <span>Default Node</span>
                </div>
            </div>
        </div>
    </div>
    <div>
        <button class="btn btn-success" @onclick="Serialize">Save</button>
        <button class="btn btn-warning" @onclick="LoadDiagramFromBrowserStorage">Load</button>
        <button class="btn btn-danger" @onclick="DeleteDiagramFromBrowserStorage">Delete local</button>
        <button class="btn btn-primary" data-toggle="collapse" @onclick="@(() => { IsVisible = !IsVisible; })">
            Nodes Drawer
        </button>
    </div>
</div>
<div class="wrapper" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
    <div class="diagram-container">
        <CascadingValue Value="_diagram">
            <DiagramCanvas>
                <Widgets><NavigatorWidget Width="300" Height="200" DefaultStyle="true"></NavigatorWidget></Widgets>
            </DiagramCanvas>
        </CascadingValue>
    </div>
</div>

@code {
    protected bool IsVisible { get; set; }

    JsonSerializer jsonSerializer = new();

    private DiagramSerialize? _savedDiagram;

    private Diagram _diagram { get; set; }
    private int? _draggedType;
    private string? _nodeTitle;

    private DiagramOptions options = new DiagramOptions
        {
            DeleteKey = "Delete", // What key deletes the selected nodes/links
            DefaultNodeComponent = null, // Default component for nodes
            AllowMultiSelection = true, // Whether to allow multi selection using CTRL
            Zoom = new DiagramZoomOptions
            {
                Minimum = 0.5, // Minimum zoom value
                Inverse = true, // Whether to inverse the direction of the zoom when using the wheel
                                // Other
            }
        };
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _diagram = new Diagram(options);

        _diagram.RegisterModelComponent<StartNode, StartNodeComponent>();
        _diagram.RegisterModelComponent<EndNode, EndNodeComponent>();
        _diagram.RegisterModelComponent<DataNode, DataNodeComponent>();
        _diagram.RegisterModelComponent<PowerNode, PowerNodeComponent>();

        HelloNode();
        //RegisterEvents();
    }
    private void HelloNode()
    {
        var node = new NodeModel(new Point(25, 25));
        node.Title = "Hello 🙂";
        _diagram.Nodes.Add(node);
    }
    private async Task SaveDiagram(string json)
    {
        logger.LogInformation("Saving to browser storage");
        await BrowserStorage.SetAsync("savedDiagram", json);
    }
    private void RegisterEvents()
    {
        _diagram.Links.Added += (l) => { };
        _diagram.Links.Removed += (l) => { };
    }

    private async Task LoadDiagramFromBrowserStorage()
    {
        logger.LogInformation("Loading from storage");
        var result = await BrowserStorage.GetAsync<string>("savedDiagram");
        if (result.Success)
        {
            logger.LogInformation("Loaded succesfully from storage");

            _savedDiagram = jsonSerializer.ReadDiagramFromJson(result.Value);
            FillDiagram();
        }
        else
        {
            logger.LogWarning("Loading from storage failed");

            // show error
        }
    }
    private async Task DeleteDiagramFromBrowserStorage()
    {
        logger.LogInformation("Deleting from storage");
        await BrowserStorage.DeleteAsync("savedDiagram");
        logger.LogInformation("Deleting from storage success"); // check for success
    }


    private void OnDragStart(int key)
    {
        _draggedType = key;
    }

    private void OnDrop(DragEventArgs e)
    {
        if (_draggedType == null) // Unknown item
            return;

        var position = _diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
        NodeModel? node = null;

        switch (_draggedType) // own method
        {
            case 0:
                DrawStartNode(position);
                break;
            case 1:
                DrawEndNode(position);
                break;
            case 2:
                DrawDataNode(position);
                break;
            case 3:
                DrawPowerNode(position);
                break;
            case 4:
                DrawNodeModel(position);
                break;

        };
        _draggedType = null;
    }
    private void DrawNodeModel(Point position)
    {
        var node = new NodeModel(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Right);
        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Left);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void DrawStartNode(Point position)
    {
        var node = new StartNode(position);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void DrawEndNode(Point position)
    {
        var node = new EndNode(position);
        node.AddPort(PortAlignment.Top);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void DrawDataNode(Point position)
    {
        var node = new DataNode(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void DrawPowerNode(Point position)
    {
        var node = new PowerNode(position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = SetNodeTitle();
        _diagram.Nodes.Add(node);
    }
    private void LoadStartNode(NodeSerialize savedNode)
    {
        var node = new StartNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void LoadEndNode(NodeSerialize savedNode)
    {
        var node = new EndNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void LoadDataNode(NodeSerialize savedNode)
    {
        var node = new DataNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private void LoadPowerNode(NodeSerialize savedNode)
    {
        var node = new PowerNode(savedNode.Id, savedNode.Position);
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Title = savedNode.Title;
        _diagram.Nodes.Add(node);
    }
    private string SetNodeTitle()
    {
        if (!String.IsNullOrEmpty(_nodeTitle))
        {
            return _nodeTitle;
        }
        return null;
    }
    private void FillDiagram()
    {
        if (_savedDiagram == null)
        {
            // exception
            return;
        }
        // clear diagram
        _diagram.Nodes.Clear();

        DrawSavedNodes();
        DrawSavedLinks();
    }
    private void DrawSavedNodes()
    {
        foreach (var savedNode in _savedDiagram.Nodes)
        {
            // check for node type if custom nodes
            switch (savedNode.NodeType.Name) // vies? use type instead of string
            {
                case "StartNode":
                    LoadStartNode(savedNode); // kan automatisch via type?
                    break;
                case "EndNode":
                    LoadEndNode(savedNode);
                    break;
                case "DataNode":
                    LoadDataNode(savedNode);
                    break;
                case "PowerNode":
                    LoadPowerNode(savedNode);
                    break;
                case "NodeModel":
                    DrawNodeModel(savedNode);
                    break;
                case "CustomNode":
                    DrawCustomNode(savedNode);
                    break;
            }
        }
    }
    private void DrawNodeModel(NodeSerialize savedNode)
    {
        NodeModel node = new NodeModel(savedNode.Id, savedNode.Position);
        if (!String.IsNullOrEmpty(savedNode.Title))
        {
            node.Title = savedNode.Title;
        }
        foreach (var port in savedNode.Ports)
        {
            node.AddPort(port.Alignment); // changes port id, but id not needed?
        }
        _diagram.Nodes.Add(node);
    }
    private void DrawCustomNode(NodeSerialize savedNode) // duplicate code
    {
        NodeModel node = new CustomNodeCopy(savedNode.Id, savedNode.Position);
        if (!String.IsNullOrEmpty(savedNode.Title))
        {
            node.Title = savedNode.Title;
        }
        foreach (var port in savedNode.Ports)
        {
            node.AddPort(port.Alignment);
        }
        _diagram.Nodes.Add(node);
    }
    private void DrawSavedLinks()
    {
        foreach (var link in _savedDiagram.Links)
        {
            // problem with custom components? probably have to type check
            NodeModel sourceNode = null;
            NodeModel targetNode = null;

            var diagramEnumerator = _diagram.Nodes.GetEnumerator(); // annoying thing
            while (diagramEnumerator.MoveNext())
            {
                object item = diagramEnumerator.Current;
                NodeModel node = (NodeModel)item; // ugly?
                if (sourceNode == null && node.Id == link.SourceNode)
                {
                    sourceNode = node;
                }
                else if (targetNode == null && node.Id == link.TargetNode)
                {
                    targetNode = node;
                }
                if (sourceNode != null && targetNode != null)
                {
                    _diagram.Links.Add(new LinkModel(sourceNode.GetPort(link.SourcePortAlignment), targetNode.GetPort(link.TargetPortAlignment)));
                    break;
                }
            }
        }
    }
    private async Task Serialize()
    {
        logger.LogInformation("Saving to local storage");
        string json = jsonSerializer.WriteToFile(_diagram); // only saving once per page load? not a problem when using database/file save/browser storage
        await SaveDiagram(json);
        logger.LogInformation("Successfully saved");
    }
}
